# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: docker-registry.saicstack.com/google_containers/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on master (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # Clone data from previous peer.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: qzschen/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql
          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing slave.
            mv xtrabackup_slave_info change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from master. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm xtrabackup_binlog_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi
          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done
            echo "Initializing replication from clone position"
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
            mysql -h 127.0.0.1 <<EOF
          $(<change_master_to.sql.orig),
            MASTER_HOST='mysql-0.mysql',
            MASTER_USER='root',
            MASTER_PASSWORD='',
            MASTER_CONNECT_RETRY=10;
          START SLAVE;
          EOF
          fi
          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-disks"
      resources:
        requests:
          storage: 1Gi

---

# Headless service for stable DNS entries of StatefulSet members.
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: mysql
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    app: mysql
---
# Client service for connecting to any MySQL instance for reads.
# For writes, you must instead connect to the master: mysql-0.mysql.
apiVersion: v1
kind: Service
metadata:
  name: mysql-read
  namespace: mysql
  labels:
    app: mysql
spec:
  type: NodePort
  ports:
  - name: mysql-read
    protocol: TCP
    port: 3306
    nodePort: 30000
  selector:
    app: mysql
---
# set write
apiVersion: v1
kind: Service
metadata:
  name: mysql-write
  namespace: mysql
spec:
  type: NodePort
  ports:
  - name: mysql-write
    protocol: TCP
    port: 3306
    nodePort: 30001
  selector:
    statefulset.kubernetes.io/pod-name: mysql-0

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  namespace: mysql
  labels:
    app: mysql
data:
  master.cnf: |
    # Apply this config only on the master.
    [mysqld]
    log-bin
    log_bin_trust_function_creators=1
    lower_case_table_names=1
    innodb_buffer_pool_size=32G
  slave.cnf: |
    # Apply this config only on slaves.
    [mysqld]
    super-read-only
    log_bin_trust_function_creators=1
    innodb_buffer_pool_size=32G


# chenqiang@Johnny kubernetes_resources_yaml_examples$ kubectl apply -f 5_1_statefulset-mysql.yaml
# statefulset.apps/mysql created
# service/mysql created
# service/mysql-read created
# service/mysql-write created
# configmap/mysql created
# chenqiang@Johnny kubernetes_resources_yaml_examples$ kubectl -n mysql get po -o wide
# NAME      READY   STATUS    RESTARTS   AGE     IP               NODE           NOMINATED NODE   READINESS GATES
# mysql-0   1/2     Running   0          2m58s   172.17.161.176   10.130.62.16   <none>           <none>
# chenqiang@Johnny kubernetes_resources_yaml_examples$ kubectl -n mysql get po -o wide
# NAME      READY   STATUS    RESTARTS   AGE    IP               NODE           NOMINATED NODE   READINESS GATES
# mysql-0   2/2     Running   0          3m1s   172.17.161.176   10.130.62.16   <none>           <none>
# mysql-1   0/2     Pending   0          3s     <none>           <none>         <none>           <none>
# chenqiang@Johnny kubernetes_resources_yaml_examples$ kubectl -n mysql get po -o wide
# NAME      READY   STATUS     RESTARTS   AGE    IP               NODE           NOMINATED NODE   READINESS GATES
# mysql-0   2/2     Running    0          3m5s   172.17.161.176   10.130.62.16   <none>           <none>
# mysql-1   0/2     Init:0/2   0          7s     <none>           10.130.62.13   <none>           <none>
# chenqiang@Johnny kubernetes_resources_yaml_examples$ kubectl -n mysql get po -o wide
# NAME      READY   STATUS     RESTARTS   AGE    IP               NODE           NOMINATED NODE   READINESS GATES
# mysql-0   2/2     Running    0          4m4s   172.17.161.176   10.130.62.16   <none>           <none>
# mysql-1   2/2     Running    0          66s    172.16.195.8     10.130.62.13   <none>           <none>
# mysql-2   0/2     Init:1/2   0          27s    172.18.25.233    10.130.62.15   <none>           <none>
# chenqiang@Johnny kubernetes_resources_yaml_examples$ kubectl -n mysql get po -o wide
# NAME      READY   STATUS    RESTARTS   AGE     IP               NODE           NOMINATED NODE   READINESS GATES
# mysql-0   2/2     Running   0          4m13s   172.17.161.176   10.130.62.16   <none>           <none>
# mysql-1   2/2     Running   0          75s     172.16.195.8     10.130.62.13   <none>           <none>
# mysql-2   1/2     Running   0          36s     172.18.25.233    10.130.62.15   <none>           <none>

# [root@scsp02124 appuser]# kubectl  -n mysql get svc
# NAME          TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE
# mysql         ClusterIP   None         <none>        3306/TCP         14m
# mysql-read    NodePort    10.0.53.29   <none>        3306:30000/TCP   14m
# mysql-write   NodePort    10.0.4.125   <none>        3306:30001/TCP   14m
# [root@scsp02124 appuser]# kubectl  -n mysql exec -it mysql-2 bash
# Defaulting container name to mysql.
# Use 'kubectl describe pod/mysql-2 -n mysql' to see all of the containers in this pod.
# root@mysql-2:/# mysql -h10.130.62.13 -p -P30001
# Enter password:
# Welcome to the MySQL monitor.  Commands end with ; or \g.
# Your MySQL connection id is 535
# Server version: 5.7.28-log MySQL Community Server (GPL)

# Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

# Oracle is a registered trademark of Oracle Corporation and/or its
# affiliates. Other names may be trademarks of their respective
# owners.

# Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# mysql> CREATE DATABASE demo;
# Query OK, 1 row affected (0.00 sec)
# mysql> exit
# Bye
# root@mysql-2:/# mysql -h10.130.62.13 -p -P30002
# Enter password:
# ERROR 2003 (HY000): Can't connect to MySQL server on '10.130.62.13' (111)
# root@mysql-2:/# mysql -h10.130.62.13 -p -P30000
# Enter password:
# Welcome to the MySQL monitor.  Commands end with ; or \g.
# Your MySQL connection id is 524
# Server version: 5.7.28 MySQL Community Server (GPL)

# Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

# Oracle is a registered trademark of Oracle Corporation and/or its
# affiliates. Other names may be trademarks of their respective
# owners.

# Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# mysql> SHOW DATABASES;
# +------------------------+
# | Database               |
# +------------------------+
# | information_schema     |
# | demo                   |
# | mysql                  |
# | performance_schema     |
# | sys                    |
# | xtrabackup_backupfiles |
# +------------------------+
# 6 rows in set (0.01 sec)


# 删除所有 mysql statefulset 的 pod 看看会发生什么

# [root@scsp02124 appuser]# kubectl  -n mysql delete po mysql-0
# pod "mysql-0" deleted
# ^C
# [root@scsp02124 appuser]# kubectl  -n mysql get po -o wide
# NAME      READY   STATUS        RESTARTS   AGE   IP               NODE           NOMINATED NODE   READINESS GATES
# mysql-0   1/2     Terminating   0          49m   172.17.161.176   10.130.62.16   <none>           <none>
# mysql-1   2/2     Running       0          46m   172.16.195.8     10.130.62.13   <none>           <none>
# mysql-2   2/2     Running       0          46m   172.18.25.233    10.130.62.15   <none>           <none>
# [root@scsp02124 appuser]# kubectl  -n mysql get po -o wide
# NAME      READY   STATUS     RESTARTS   AGE   IP              NODE           NOMINATED NODE   READINESS GATES
# mysql-0   0/2     Init:0/2   0          7s    <none>          10.130.62.16   <none>           <none>
# mysql-1   2/2     Running    0          47m   172.16.195.8    10.130.62.13   <none>           <none>
# mysql-2   2/2     Running    0          46m   172.18.25.233   10.130.62.15   <none>           <none>
# [root@scsp02124 appuser]# kubectl  -n mysql get po -o wide
# NAME      READY   STATUS    RESTARTS   AGE   IP               NODE           NOMINATED NODE   READINESS GATES
# mysql-0   1/2     Running   0          12s   172.17.161.169   10.130.62.16   <none>           <none>
# mysql-1   2/2     Running   0          47m   172.16.195.8     10.130.62.13   <none>           <none>
# mysql-2   2/2     Running   0          46m   172.18.25.233    10.130.62.15   <none>           <none>
# [root@scsp02124 appuser]# kubectl  -n mysql get po -o wide
# NAME      READY   STATUS    RESTARTS   AGE   IP               NODE           NOMINATED NODE   READINESS GATES
# mysql-0   1/2     Running   0          14s   172.17.161.169   10.130.62.16   <none>           <none>
# mysql-1   2/2     Running   0          47m   172.16.195.8     10.130.62.13   <none>           <none>
# mysql-2   2/2     Running   0          46m   172.18.25.233    10.130.62.15   <none>           <none>
# [root@scsp02124 appuser]# kubectl  -n mysql get po -o wide
# NAME      READY   STATUS    RESTARTS   AGE   IP               NODE           NOMINATED NODE   READINESS GATES
# mysql-0   2/2     Running   0          18s   172.17.161.169   10.130.62.16   <none>           <none>
# mysql-1   2/2     Running   0          47m   172.16.195.8     10.130.62.13   <none>           <none>
# mysql-2   2/2     Running   0          47m   172.18.25.233    10.130.62.15   <none>           <none>
